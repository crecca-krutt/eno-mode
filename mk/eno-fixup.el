;;; eno-fixup.el --- subset of org-fixup.el
;;
;; Author of org-fixup.el: Achim Gratz
;; Keywords: enomode
;;
;; This file is not part of GNU Emacs
;;
;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;; This file is slightly modified version of org-fixup.el. It uses its
;; modified function for creating eno-version.el, which is a file very
;; similar to org-version.el. The same applies to
;; `eno-make-eno-loaddefs', which is almost exactly the same as
;; `org-make-org-loaddefs'.

(require 'autoload)
(require 'org-compat "org-compat.el")

(defun eno-make-eno-version (eno-release eno-git-version odt-dir)
  "Make the file eno-version.el in the current directory.
This function is internally used by the build system and should
be used by foreign build systems or installers to produce this
file in the installation directory of eno-mode.  Eno will not
work correctly if this file is not present (except directly from
the Git work tree)."
  (with-temp-buffer
    (insert "\
;;; eno-version.el --- autogenerated file, do not edit
;;
;;; Code:
;;;\#\#\#autoload
\(defun eno-release ()
  \"The release version of Eno.
Inserted by installing Eno mode or when a release is made.\"
   (let ((eno-release \"" eno-release "\"))
     eno-release))
;;;\#\#\#autoload
\(defun eno-git-version ()
  \"The Git version of org-mode.
Inserted by installing Org or when a release is made.\"
   (let ((eno-git-version \"" eno-git-version "\"))
     eno-git-version))
;;;\#\#\#autoload
\(defvar eno-odt-data-dir \"" odt-dir "\"
  \"The location of ODT styles.\")
\f\n\(provide 'eno-version\)
\f\n;; Local Variables:\n;; version-control: never
;; no-byte-compile: t
;; coding: utf-8\n;; End:\n;;; eno-version.el ends here\n")
    (let ((inhibit-read-only t))
      (write-file "eno-version.el"))))

(defun eno-make-eno-loaddefs ()
  "Make the file eno-loaddefs.el in the current directory.
This function is internally used by the build system and should
be used by foreign build systems or installers to produce this
file in the installation directory of eno-mode.  Eno will not
work correctly if this file is not up-to-date."
  (with-temp-buffer
    (set-visited-file-name "eno-loaddefs.el")
    (insert ";;; eno-loaddefs.el --- autogenerated file, do not edit\n;;\n;;; Code:\n")
    (let ((files (directory-files default-directory
				  nil "^\\(eno\\|ob\\|ox\\)\\(-.*\\)?\\.el$")))
      (mapc (lambda (f) (generate-file-autoloads f)) files))
    (insert "\f\n(provide 'eno-loaddefs)\n")
    (insert "\f\n;; Local Variables:\n;; version-control: never\n")
    (insert ";; no-byte-compile: t\n;; no-update-autoloads: t\n")
    (insert ";; coding: utf-8\n;; End:\n;;; eno-loaddefs.el ends here\n")
    (let ((inhibit-read-only t))
      (save-buffer))))

(defun eno-make-autoloads (&optional compile force)
  "Make the files org-loaddefs.el and org-version.el in the install directory.
Finds the install directory by looking for library \"org\".
Optionally byte-compile lisp files in the install directory or
force re-compilation.  This function is provided for easier
manual install when the build system can't be used."
  (let* ((origin default-directory)
	 (dirlisp (org-find-library-dir "org"))
	 (dirorg (concat dirlisp "../" ))
	 (dirodt (if (boundp 'org-odt-data-dir)
		     org-odt-data-dir
		   (concat dirorg "etc/"))))
    (unwind-protect
	(progn
	  (cd dirlisp)
	  (org-fixup)
	  (org-make-org-version (org-release) (org-git-version) dirodt)
	  (org-make-org-loaddefs)
	  (when compile (byte-recompile-directory dirlisp 0 force)))
      (cd origin))))

(provide 'org-fixup)

;; Local Variables:
;; no-byte-compile: t
;; coding: utf-8
;; End:
;;; eno-fixup.el ends here
